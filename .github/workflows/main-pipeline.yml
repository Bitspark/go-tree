name: Main Pipeline

on:
  push:
    branches: [ main ]
  release:
    types: [created]

jobs:
  run-shared-checks:
    uses: ./.github/workflows/shared-go-checks.yml
    with:
      go-version: '1.21'
      run-race-detector: true
      run-coverage: true
      upload-coverage: true
      full-security-scan: true
      fail-on-coverage-decrease: true
    secrets:
      codecov-token: ${{ secrets.CODECOV_TOKEN }}
  
  cross-build:
    name: Cross-Platform Build
    runs-on: ubuntu-latest
    needs: [run-shared-checks]
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p bin
          # Build just the CLI tool (single package)
          go build -v -o bin/app-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/gotree
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.goos }}-${{ matrix.goarch }}
          path: bin/app-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          
  release:
    name: Create Release
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: cross-build
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create release assets
        run: |
          mkdir -p release-assets
          cd artifacts
          # Process each downloaded artifact directory
          for dir in */; do
            # Get the platform name from directory
            platform=$(basename "$dir")
            # Find the binary file
            find "$dir" -type f | while read binary; do
              # Create both tar.gz and zip files
              tar -czvf "../release-assets/${platform}.tar.gz" "$binary"
              
              # Create a temporary directory for the zip file with a clean structure
              tmp_dir=$(mktemp -d)
              
              # Get just the binary name without the path
              binary_name=$(basename "$binary")
              
              # Copy the binary to the temp dir
              cp "$binary" "$tmp_dir/$binary_name"
              
              # Create zip file (especially useful for Windows)
              (cd "$tmp_dir" && zip -9 "../../release-assets/${platform}.zip" "$binary_name")
              
              # Clean up temp directory
              rm -rf "$tmp_dir"
            done
          done
          
          # Debug: List contents of release-assets to verify
          echo "Release assets created:"
          ls -la ../release-assets
      
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-assets/*.tar.gz
            release-assets/*.zip
          
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [run-shared-checks]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: Generate docs
        run: |
          go install golang.org/x/tools/cmd/godoc@latest
          # Add your documentation generation steps here
      
      # Here you would add steps to deploy the documentation
      # to GitHub Pages or your preferred hosting service 