name: Main Pipeline

on:
  push:
    branches: [ main ]
  release:
    types: [created]

jobs:
  test:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: Install dependencies
        run: go mod download
      
      - name: Run tests
        run: go test -v -race ./...
        
      - name: Generate coverage report
        run: go test -coverprofile=coverage.out -covermode=atomic ./...
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          fail_ci_if_error: true
  
  lint:
    name: Comprehensive Linting
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m --verbose
          
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: Run gosec
        uses: securego/gosec@master
        with:
          args: ./...
          
      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
      
      - name: Run trivy for filesystem scanning
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
  
  cross-build:
    name: Cross-Platform Build
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -o bin/app-${{ matrix.goos }}-${{ matrix.goarch }} ./...
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-${{ matrix.goos }}-${{ matrix.goarch }}
          path: bin/app-${{ matrix.goos }}-${{ matrix.goarch }}
          
  release:
    name: Create Release
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: cross-build
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Create release assets
        run: |
          cd artifacts
          find . -type f -not -path "*/\.*" | xargs -I {} tar -czvf {}.tar.gz {}
      
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.tar.gz
          
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, lint, security]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: Generate docs
        run: |
          go install golang.org/x/tools/cmd/godoc@latest
          # Add your documentation generation steps here
      
      # Here you would add steps to deploy the documentation
      # to GitHub Pages or your preferred hosting service 